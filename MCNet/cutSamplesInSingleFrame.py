"""
Script for cutting a single image with multiple frames into single frames and generating GIFs out of them.
Training samples generated by the MCNet are saved in the following format (single image as grid, flexible row and column count):
/ Gen1 | Gen2 | Gen3 | Gen4 | Gen5 | Gen6 | Gen7 | Gen8 | Gen9 | Gen10 \
\ GT1  | GT2  | GT3  | GT4  | GT5  | GT6  | GT7  | GT8  | GT9  | GT10  /
This script can be used to get out of this single image all frames as an own image and for both generation and ground truth a GIF.

Usage:
    python cutSamplesInSingleFrame.py [--path SAMPLE_FILE_PATH] [--rows ROW_COUNT] [--cols COLUMN_COUNT]

Args:
    path - Path to parent directory of all samples which should be processed. For each sample a new directory will be created next to the it containing
           all extracted frames and GIFs.
    rows - Number of rows in the samples. E.g. for the structure above the row count is 2
    cols - Number of columns in the samples. E.g. for the structure above the column count is 10

"""
import numpy as np
from glob import glob
from scipy.ndimage import imread
import scipy.misc
import os
import imageio
from argparse import ArgumentParser


DEFAULT_SAMPLE_FILE_PATH = "/lhome/phlippe/Documents/Python/iclr2017mcnet/samples/GRIDMAP_MCNET_image_size=64_K=10_T=10_batch_size=32_alpha=1.0_beta=0.02_lr=1e-05/"


def cutSampleInSingleFrames(sample, row_count, column_count, image_base_path):
    row_step = sample.shape[0] / row_count
    column_step = sample.shape[1] / column_count
    step_file = image_base_path.rsplit("/",-1)[-2].split("_",-1)[-1]

    for row in range(row_count):
        all_frames_in_row = []
        if row is 0:
            prefile = "_gen_"+step_file+"_"
        else:
            prefile = "_gt_"+step_file+"_"
        for column in range(column_count):
            frame = sample[row * row_step: (row + 1) * row_step, column * column_step : (column + 1) * column_step,:]
            file_path = image_base_path
            file_path += prefile
            file_path += str(column).zfill(2) + ".png"
            scipy.misc.toimage(frame).save(file_path)
            all_frames_in_row.append(frame)
        GIF_PATH = image_base_path + "GIF"+prefile+".gif"
        kargs = { 'duration': 0.25 }
        imageio.mimsave(GIF_PATH, all_frames_in_row, 'GIF', **kargs)


def main(sample_file_path, row_count, column_count):
    sample_paths = sorted(glob(os.path.join(sample_file_path, "*.png")))

    for sample_file in sample_paths:
        print sample_file
        sample = scipy.misc.imread(sample_file)
        new_folder = sample_file.rsplit("/",1)[0] + "/" + sample_file.rsplit("/",1)[-1].split(".",-1)[0] + "/"
        if not os.path.exists(new_folder):
            os.makedirs(new_folder)
        cutSampleInSingleFrames(sample, row_count, column_count, os.path.join(new_folder,"frame") )


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("--path", type=str, dest="sample_file_path",
                            default=DEFAULT_SAMPLE_FILE_PATH, help="Path to parent directory of samples")
    parser.add_argument("--rows", type=int, dest="row_count",
                            default=2, help="Number of rows in the samples")
    parser.add_argument("--cols", type=int, dest="column_count",
                            default=10, help="Number of columns in the samples")

    args = parser.parse_args()
    main(**vars(args))
